let(appState require("eth-re").appState)
let(createComponent require("eth-re").createComponent)
let(createAppState require("eth-re").createAppState)
let(mount require("eth-re").mount)

let(KEY_ENTER "Enter")

// actions

let(addTodo fn(appState title
  appStateUpdate(appState [:todos] fn(todos
    append({:title title :state :active} todos)
  ))
))

// selectors

let(selectVisibleTodos fn(currentFilter todos
  cond(
    currentFilter filter(fn(t ==(t.state currentFilter)) todos)
    :else todos
  )
))

// components

let(todo createComponent(fn(s properties
  [:div {:className "todo"}
    [:span {} properties.title]]
)))

let(todos createComponent(fn(state p {
  let(filteredTodos selectVisibleTodos(p.currentFilter p.todos))
  [:div {:className "todos"} map(fn(t [todo {:todo t}]) filteredTodos)]
})))

let(todoInput createComponent({
  :initialState {:title ""}
  :render fn(s p state instance {
    let(onChange fn(e instance.setState({:title e.target.value})))
    let(onKeydown fn(e
      if(==(e.key KEY_ENTER) {
        addTodo(s state.title)
        instance.setState({:title ""})
      })
    ))
    [:input
      {
        :type "text"
        :value state.title
        :onChange onChange
        :onKeydown onKeydown
      }
    ]
  })
}))

let(todoApp createComponent(fn(s properties {
  let(currentFilter s.state.currentFilter)
  let(todos s.state.todos)
  [:div {} [
    [todo-input]
    [todos {:currentFilter currentFilter :todos todos}]
  ]]
})))

// app

let(appState createAppState({
  :currentFilter null
  :todos []
}))

mount([todoApp] document.getElementById("app-root") appState)
