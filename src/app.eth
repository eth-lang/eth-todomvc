let(appState require("eth-re").appState)
let(createComponent require("eth-re").createComponent)
let(createAppState require("eth-re").createAppState)
let(mount require("eth-re").mount)

let(KEY_ENTER "Enter")

// actions

let(addTodo fn(appState title
  appStateUpdate(appState [:todos] fn(todos
    append({:title title :state :active} todos)
  ))
))

// selectors

let(selectVisibleTodos fn(currentFilter todos
  cond(
    currentFilter filter(fn(t ==(t.state currentFilter)) todos)
    :else todos
  )
))

// components

let(Todo createComponent(fn(s properties {
  let(t properties.todo)
  [:li {:className if(t.completed "completed" "")}
    [:input {:className "toggle" :type "checkbox" :checked t.completed}]
    [:div {:className "view"}
      [:label t.title]
      [:button {:className "destroy"}]
    ]
    [:input {:className "edit" :value t.title}]
  ]
})))

let(Todos createComponent(fn(state p {
  let(filteredTodos selectVisibleTodos(p.currentFilter p.todos))
  [:section {:className "main"}
    [:input {:className "toggle-all" :type "checkbox"}]
    [:label {:htmlFor "toggle-all"} "Mark all as complete"]
    [:ul {:className "todo-list"}
      map(fn(t [Todo {:todo t}]) filteredTodos)
    ]
  ]
})))

let(TodoInput createComponent({
  :initialState {:title ""}
  :render fn(s p state instance {
    let(onChange fn(e instance.setState({:title e.target.value})))
    let(onKeyDown fn(e
      if(==(e.key KEY_ENTER) {
        addTodo(s state.title)
        instance.setState({:title ""})
      })
    ))
    [:input {
        :className "new-todo"
        :placeholder "What needs to be done?"
        :autoFocus true
        :type "text"
        :value state.title
        :onChange onChange
        :onKeyDown onKeyDown
    }]
  })
}))

let(TodoHeader createComponent(fn(s properties
  [:header {:className "header"}
    [:h1 "todos"]
    [TodoInput]
  ]
)))

let(TodoApp createComponent(fn(s properties {
  let(currentFilter s.state.currentFilter)
  let(todos s.state.todos)
  [:section {:className "todoapp"}
    [TodoHeader]
    if(not(isEmpty(todos)) [Todos {:currentFilter currentFilter :todos todos}] null)
  ]
})))

// app

let(appState createAppState({
  :currentFilter null
  :todos [{:title "asd"}]
}))

mount([TodoApp] document.getElementById("app-root") appState)
